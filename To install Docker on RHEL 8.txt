To install Docker on RHEL 8.6, follow these steps:
Step 1: Update System Packages
sudo dnf update -y
Step 2: Enable Docker Repository
Docker is not included in the default RHEL repositories. Enable the Docker CE (Community Edition) repository:
sudo dnf config-manager --add-repo=https://download.docker.com/linux/rhel/docker-ce.repo
Step 3: Install Docker CE
Now, install Docker and related dependencies:
sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
Step 4: Start and Enable Docker Service
sudo systemctl enable --now docker
Step 5: Verify Docker Installation
Check the Docker service status:
sudo systemctl status docker
Confirm Docker is installed correctly by running:
docker version
docker info
Step 6: Add User to Docker Group (Optional)
By default, Docker requires root privileges. To allow a non-root user to run Docker without sudo:
sudo usermod -aG docker $USER
newgrp docker
Step 7: Test Docker Installation
Run the following test container:
docker run hello-world
Step 8: Enable Firewall Rules for Docker (Optional)
If using a firewall, allow Docker-related services:
sudo firewall-cmd --permanent --zone=public --add-masquerade
sudo firewall-cmd --reload
Now, Docker should be successfully installed and running on RHEL 8.6.
Docker Images: Configuration, Management, and Troubleshooting
1. Understanding Docker Images
Docker images are lightweight, stand-alone, and executable packages that include everything needed to run a piece of software, including the code, runtime, libraries, and dependencies.
2. Managing Docker Images
2.1 List Docker Images
To list all available images on your system:
docker images
Example Output:
REPOSITORY TAG IMAGE ID CREATED SIZE
ubuntu latest 2dc39ba059dc 3 days ago 77MB
nginx latest 605c77e624dd 5 days ago 23MB
2.2 Pulling Images from Docker Hub
Download an image from Docker Hub:
docker pull nginx:latest
You can specify a version/tag as well:
docker pull ubuntu:20.04
2.3 Removing Docker Images
Remove a specific image using the Image ID:
docker rmi <IMAGE_ID>
Example:
docker rmi 2dc39ba059dc
Remove all unused images:
Dockers And Podman
21 March 2025 12:12
docker and podman2 Page 1
docker image prune -a
3. Configuring Docker Images
3.1 Creating a Custom Docker Image with a Dockerfile
A Dockerfile is used to define a custom image.
Example: Create a Custom Image for a Python Flask App
Create a directory and move into it:
mkdir flask_app && cd flask_app
Create a Dockerfile in this directory:
touch Dockerfile
Add the following content to the Dockerfile:
# Use an official Python runtime as base image
FROM python:3.9
# Set working directory
WORKDIR /app
# Copy application files
COPY . /app
# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt
# Expose port
EXPOSE 5000
# Run the application
CMD ["python", "app.py"]
Build the Docker image:
docker build -t flask_app:latest .
Run a container from this image:
docker run -d -p 5000:5000 flask_app
4. Troubleshooting Docker Images
4.1 Check Running Containers
To list running containers:
docker ps
To see all containers (including stopped ones):
docker ps -a
4.2 Debugging a Failing Container
If a container is not running, check its logs:
docker logs <CONTAINER_ID>
Example:
docker logs flask_app
4.3 Enter a Running Container
To enter a running container interactively:
docker exec -it <CONTAINER_ID> /bin/bash
Example:
docker exec -it flask_app /bin/bash
4.4 Restart a Container
docker restart <CONTAINER_ID>
4.5 Check Container Resource Usage
docker stats
4.6 Remove Dangling Images
docker image prune
5. Best Practices for Docker Images
? Use a Smaller Base Image (e.g., alpine, python:slim)
? Minimize Layers in the Dockerfile
? Use Multi-Stage Builds to Reduce Image Size
? Keep Dependencies Updated
? Regularly Clean Up Unused Images and Containers
Now, you should be able to configure, manage, and troubleshoot Docker images efficiently!
